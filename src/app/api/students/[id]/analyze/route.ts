import { NextRequest, NextResponse } from "next/server";
import { createAdminClient } from "@/lib/supabase";
import { extractFeatures } from "@/lib/features";

/**
 * @swagger
 * /api/students/{id}/analyze:
 *   post:
 *     summary: Analisis risiko untuk 1 mahasiswa (jalankan AI, simpan hasil, lalu kembalikan ringkasan)
 *     tags: [AI]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Student UUID
 *     responses:
 *       200:
 *         description: Hasil analisis
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 feat:
 *                   $ref: '#/components/schemas/Features'
 *                 ai:
 *                   type: object
 *                   properties:
 *                     prediction:
 *                       type: string
 *                     probabilities:
 *                       type: object
 *       502:
 *         description: Gagal memanggil service AI
 */

function joinUrl(base: string, path: string): string {
  const b = base.replace(/\/+$/, "");
  const p = path.replace(/^\/?/, "");
  return `${b}/${p}`;
}

function mapRiskForDb(label: string): "HIGH" | "MED" | "LOW" {
  const L = (label || "").toLowerCase();
  if (L.includes("tinggi")) return "HIGH";
  if (L.includes("sedang")) return "MED";
  return "LOW";
}

function mapRiskToCluster(label: string): number {
  const L = (label || "").toLowerCase();
  if (L.includes("tinggi")) return 2;
  if (L.includes("sedang")) return 1;
  return 0;
}

type AiResponse = {
  prediction: string;
  probabilities?: Record<string, number>;
};

export async function POST(
  _req: NextRequest,
  ctx: { params: Promise<{ id: string }> }
) {
  const { id: studentId } = await ctx.params;

  try {
    const featuresForApi = await extractFeatures(studentId);

    const base = process.env.AI_BASE_URL;
    if (!base) {
      return NextResponse.json({ error: "AI_BASE_URL is not set" }, { status: 500 });
    }
    const aiServiceUrl = joinUrl(base, "/predict");

    const res = await fetch(aiServiceUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json", Accept: "application/json" },
      body: JSON.stringify(featuresForApi),
    });

    if (!res.ok) {
      const bodyText = await res.text().catch(() => "");
      console.error("AI service error:", res.status, bodyText);
      return NextResponse.json(
        { error: `AI service error: Status ${res.status}` },
        { status: 502 }
      );
    }

    const aiResult = (await res.json()) as AiResponse;

    const supabase = createAdminClient();

    const { data: vsss } = await supabase
      .from("v_student_semester_scores")
      .select("semester_id, semester_no, ips")
      .eq("student_id", studentId)
      .order("semester_no", { ascending: true });

    const ipsList = (vsss ?? []).map((r) => Number(r.ips ?? 0));
    const deltaIps =
      ipsList.length >= 2 ? ipsList[ipsList.length - 1] - ipsList[ipsList.length - 2] : 0;

    const lastRow = (vsss ?? []).at(-1);
    const semesterIdForSave: string | null = (lastRow?.semester_id as any) ?? null;

    const { error: upsertErr } = await supabase.from("ml_features").upsert(
      {
        student_id: studentId,
        semester_id: semesterIdForSave,
        gpa_cum: (featuresForApi as any).IPK_Terakhir,
        ips_last: (featuresForApi as any).IPS_Terakhir,
        delta_ips: deltaIps,
        mk_gagal_total: (featuresForApi as any).Jumlah_MK_Gagal,
        sks_tunda: (featuresForApi as any).Total_SKS_Gagal,

        pct_d: 0,
        pct_e: 0,
        repeat_count: 0,
        mk_prasyarat_gagal: 0,

        cluster_label: mapRiskToCluster(aiResult.prediction),
        risk_level: mapRiskForDb(aiResult.prediction),
        distance: 0,
      },
      { onConflict: "student_id,semester_id" }
    );

    if (upsertErr) {
      console.error("ml_features upsert error:", upsertErr);
    }

    const { error: adviceErr } = await supabase.from("advice").insert({
      student_id: studentId,
      semester_id: semesterIdForSave,
      risk_level: aiResult.prediction,
      reasons: { source_label: aiResult.prediction, note: "Mapped to enum for ml_features" },
      actions: { info: "To be generated by separate logic" },
    });

    if (adviceErr) {
      console.error("advice insert error:", adviceErr);
    }

    return NextResponse.json({ feat: featuresForApi, ai: aiResult });
  } catch (error) {
    console.error("Unexpected error:", error);
    const msg = error instanceof Error ? error.message : "Internal Server Error";
    return NextResponse.json({ error: "Internal Server Error", details: msg }, { status: 500 });
  }
}
